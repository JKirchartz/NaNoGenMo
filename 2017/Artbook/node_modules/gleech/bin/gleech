#!/usr/bin/env node
'use strict';
/*
 * Gleech
 * Copyright (C) 2017 jkirchartz <me@jkirchartz.com>
 *
 * Distributed under terms of the GPL3.0 license.
 */
var gleech = require('../dist/gleech.js');
var cmdr = require('commander');
var pkg = require('../package.json');

cmdr
.command('glitch <input> <output> [operation] [parameters...]')
.description('Glitches an image with optional function name and parameters')
.action(function(input, output, operation, parameters) {
  // convert numeric parameters into numbers
  for (var p in parameters) {
		if ( !isNaN(parseFloat(parameters[p], 10)) ) {
			parameters[p] = parseFloat(parameters[p], 10);
		}
		console.log(parameters[p]);
	}
	gleech.read(input, function(err, image) {
		if (operation && parameters) {
			image[operation].apply(this, parameters);
		} else if (operation && !parameters) {
			image[operation]();
		} else {
			image.glitch()
		}
		image.write(output);
	});
});

cmdr.command('list')
.description('Lists available functions')
.action(function() {
	var output = "";
	output += ('\nGlitches:\n\n');
	for (var prop in gleech.prototype) {
		if (typeof gleech.prototype[prop] === 'function' &&
				gleech.prototype[prop].name){
			output += gleech.prototype[prop].name + ' ';
		}
	}
	output += ('\n\nJimp functions & Glitch presets:\n\n');
	for (var prop2 in gleech.prototype) {
		if (typeof gleech.prototype[prop2] === 'function' &&
				! gleech.prototype[prop2].name){
			output += String(prop2) + ' ';
		}
	}
	console.log(output);
});

cmdr.version(pkg.version)
.description(pkg.description)
.parse(process.argv);
